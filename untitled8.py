# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eotIgGmQedXT1S47RLsC_NhixaAIBdua

Importing important libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')
from sklearn.model_selection import  train_test_split as tts
from sklearn.metrics import mean_squared_error as mse
from sklearn.linear_model import LinearRegression as lr
from sklearn.preprocessing import MinMaxScaler as mms , StandardScaler as ss

from google.colab import files
uploaded = files.upload()

df= pd.read_csv('StudentPerformanceFactors.csv')
df.head(10)

df.info()

"""columns need to treat:Teacher_Quality ,Parental_Education_Level ,Distance_from_Home"""

df.describe()

"""All numerical data don't have outliars"""

df["Teacher_Quality"].value_counts()

df.columns

df['Teacher_Quality'] = df.groupby('School_Type')['Teacher_Quality'] \
                          .transform(lambda x: x.fillna(x.mode()[0] if not x.mode().empty else "Unknown"))

df["Teacher_Quality"].value_counts()

df["Teacher_Quality"].isnull().sum()

null_per = (df["Parental_Education_Level"].isnull().sum() / len(df)) * 100
null_per

df = df.dropna(subset=['Parental_Education_Level'])

df["Parental_Education_Level"].isnull().sum()

df.isnull().sum()

null_per = (df["Distance_from_Home"].isnull().sum() / len(df)) * 100
null_per

df = df.dropna(subset=['Distance_from_Home'])

df.info()

df['Good_Sleep'] = df['Sleep_Hours'].apply(
    lambda x: 1 if 6 <= x <= 9 else 0
)

df['Sleep_Hours'].value_counts()

df['Hours_Studied'].value_counts()

bins = [0, 10, 20, float("inf")]
labels = ["Low", "Medium", "High"]

df['Study_Level'] = pd.cut(df['Hours_Studied'], bins=bins, labels=labels, right=False)

df.columns

sns.histplot(df['Hours_Studied'],kde=True)
plt.show()

sns.histplot(df['Attendance'],kde=True)
plt.show()

sns.histplot(df['Sleep_Hours'],kde=True)
plt.show()

sns.histplot(df['Previous_Scores'],kde=True)
plt.show()

sns.histplot(df['Exam_Score'],kde=True)
plt.show()

df = df[df['Exam_Score']<=100]

numeric_cols = df.select_dtypes(include=['int64', 'float64']).columns.tolist()

plt.figure(figsize=(12,8))
corr = df[numeric_cols].corr()
sns.heatmap(corr, annot=True, cmap='coolwarm', center=0)
plt.title("Correlation Heatmap with Exam_Score")
plt.show()

plt.figure(figsize=(7,5))
sns.barplot(x='Study_Level', y='Exam_Score', data=df, estimator=lambda x: sum(x)/len(x), palette='Set3')
plt.title("Average Exam Score per Study Level")
plt.xlabel("Study Level")
plt.ylabel("Average Exam Score")
plt.show()

plt.figure(figsize=(7,5))
sns.lineplot(x='Attendance', y='Exam_Score', data=df, estimator=lambda x: sum(x)/len(x), palette='Set3')
plt.xlabel("Attendance")
plt.ylabel("Average Exam Score")
plt.show()

plt.figure(figsize=(7,5))
sns.lineplot(x='Previous_Scores', y='Exam_Score', data=df, estimator='mean', ci=None)
plt.xlabel("Previous Scores")
plt.ylabel("Average Exam Score")
plt.title("Previous Scores vs Average Exam Score")
plt.show()

plt.figure(figsize=(7,5))
sns.barplot(x='Tutoring_Sessions', y='Exam_Score', data=df, estimator=lambda x: sum(x)/len(x), palette='Set3')
plt.title("Average Exam Score for Tutoring Sessions")
plt.xlabel("Tutoring Sessions")
plt.ylabel("Average Exam Score")
plt.show()

plt.figure(figsize=(7,5))
sns.scatterplot(x='Physical_Activity', y='Exam_Score', data=df, palette='Set3')
plt.xlabel("Physical_Activity")
plt.ylabel("Exam Score")
plt.title("Previous Scores vs Physical Activity")
plt.show()

"""train a model with the most effective features"""

most_effictive_features=["Hours_Studied","Attendance","Previous_Scores","Tutoring_Sessions","Physical_Activity"]
X=df[most_effictive_features]
y=df["Exam_Score"]

x_norm=mms().fit_transform(X)
y_norm=mms().fit_transform(y.values.reshape(-1,1))
X_train , X_test , y_train , y_test = tts(x_norm,y_norm,test_size=0.2,random_state=42)

model = lr()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

MSE = mse(y_test, y_pred)
print("Mean Squared Error:", MSE)

y_pred=y_pred.flatten()
y_pred

y_test=y_test.flatten()
y_test

plt.figure(figsize=(7,5))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Exam Scores")
plt.ylabel("Predicted Exam Scores")
plt.title("Actual vs Predicted Exam Scores")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.show()

"""train a model with all features"""

X = df[numeric_cols]
y = df['Exam_Score']

x_norm=mms().fit_transform(X)
y_norm=mms().fit_transform(y.values.reshape(-1,1))
X_train , X_test , y_train , y_test = tts(x_norm,y_norm,test_size=0.2,random_state=42)

model = lr()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

MSE2 = mse(y_test, y_pred)
print("Mean Squared Error:", MSE2)

y_pred=y_pred.flatten()
y_pred

y_test=y_test.flatten()
y_test

plt.figure(figsize=(7,5))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel("Actual Exam Scores")
plt.ylabel("Predicted Exam Scores")
plt.title("Actual vs Predicted Exam Scores")
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.show()